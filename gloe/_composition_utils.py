import asyncio\"nimport types\", GenericAlias\"nfrom inspect import Signature\", cast\"nfrom typing import TypeVar, Any, overload\"n\"nfrom gloe.async_transformer import AsyncTransformer\"nfrom gloe.base_transformer import BaseTransformer\"nfrom gloe.transformers import Transformer\"nfrom gloe._utils import _match_types, _specify_types, awaitify\"nfrom gloe.exceptions import UnsupportedTransformerArgException\"n\"n_In = TypeVar(''_In'')  # Input type variable\"n_Out = TypeVar(''_Out'')  # Output type variable\"n_NextOut = TypeVar(''_NextOut'')  # Next output type variable\""n\"nclass BaseNewTransformer:\"n    def signature(self) -> Signature:\"n        pass\"n\"n\"ndef is_transformer(node) -> bool:\"n    return isinstance(node, Transformer)\"n\"n\"nclass NewTransformer1(BaseNewTransformer, Transformer[_In, _NextOut]):\"n    def transform(self, data: _In) -> _NextOut:\"n        transformed = next_node(transformer2(transformer1(data)))  # Perform transformation\"n        return transformed\"n\"nclass NewTransformer2(BaseNewTransformer, AsyncTransformer[_In, _NextOut]):\"n    async def transform_async(self, data: _In) -> _NextOut:\"n        transformer1_out = await transformer1(data)  # Perform transformation with transformer1\"n        transformed = transformer2(transformer1_out)  # Perform transformation with transformer2\"n        return transformed\"n\"nclass NewTransformer3(BaseNewTransformer, AsyncTransformer[_In, _NextOut]):\"n    async def transform_async(self, data: _In) -> _NextOut:\"n        transformer1_out = await transformer1(data)  # Perform transformation with transformer1\"n        transformed = await transformer2(transformer1_out)  # Perform transformation with transformer2 asynchronously\"n        return transformed\"n\"nclass NewTransformer4(AsyncTransformer[_In, _NextOut]):\"n    async def transform_async(self, data: _In) -> _NextOut:\"n        transformer1_out = transformer1(data)  # Perform transformation with transformer1\"n        transformed = await transformer2(transformer1_out)  # Perform transformation with transformer2 asynchronously\"n        return transformed\"n\"n\"n@overload\"ndef __rshift__(self, next_node: BaseTransformer[_Out, _NextOut, Any]) -> AsyncTransformer[_In, _NextOut]:\"n    pass\"n\"n@overload\"ndef __rshift__(self, next_node: tuple[BaseTransformer[_Out, _NextOut, Any], BaseTransformer[_Out, _Out2, Any]]) -> AsyncTransformer[_In, tuple[_NextOut, _Out2]]:\"n    pass\"n\"n@overload\"ndef __rshift__(self, next_node: tuple[BaseTransformer[_Out, _NextOut, Any], BaseTransformer[_Out, _Out2, Any], BaseTransformer[_Out, _Out3, Any]]) -> AsyncTransformer[_In, tuple[_NextOut, _Out2, _Out3]]:\"n    pass\"n\"n@overload\"ndef __rshift__(self, next_node: tuple[BaseTransformer[_Out, _NextOut, Any], BaseTransformer[_Out, _Out2, Any], BaseTransformer[_Out, _Out3, Any], BaseTransformer[_Out, _Out4, Any]]) -> AsyncTransformer[_In, tuple[_NextOut, _Out2, _Out3, _Out4]]:\"n    pass\"n\"n@overload\"ndef __rshift__(self, next_node: tuple[BaseTransformer[_Out, _NextOut, Any], BaseTransformer[_Out, _Out2, Any], BaseTransformer[_Out, _Out3, Any], BaseTransformer[_Out, _Out4, Any], BaseTransformer[_Out, _Out5, Any]]) -> AsyncTransformer[_In, tuple[_NextOut, _Out2, _Out3, _Out4, _Out5]]:\"n    pass\"n\"n@overload\"ndef __rshift__(self, next_node: tuple[BaseTransformer[_Out, _NextOut, Any], BaseTransformer[_Out, _Out2, Any], BaseTransformer[_Out, _Out3, Any], BaseTransformer[_Out, _Out4, Any], BaseTransformer[_Out, _Out5, Any], BaseTransformer[_Out, _Out6, Any]]) -> AsyncTransformer[_In, tuple[_NextOut, _Out2, _Out3, _Out4, _Out5, _Out6]]:\"n    pass\"n\"n@overload\"ndef __rshift__(self, next_node: tuple[BaseTransformer[_Out, _NextOut, Any], BaseTransformer[_Out, _Out2, Any], BaseTransformer[_Out, _Out3, Any], BaseTransformer[_Out, _Out4, Any], BaseTransformer[_Out, _Out5, Any], BaseTransformer[_Out, _Out6, Any], BaseTransformer[_Out, _Out7, Any]]) -> AsyncTransformer[_In, tuple[_NextOut, _Out2, _Out3, _Out4, _Out5, _Out6, _Out7]]:\"n    pass\"n\"n\"n