import asyncio\\nimport types\\nfrom inspect import Signature\\nfrom typing import TypeVar, Any, cast\\n\\nfrom gloe.async_transformer import AsyncTransformer\\nfrom gloe.base_transformer import BaseTransformer\\nfrom gloe.transformers import Transformer\\nfrom gloe._utils import _match_types, _specify_types, awaitify\\nfrom gloe.exceptions import UnsupportedTransformerArgException\\n\\n_In = TypeVar('_In')\\n_Out = TypeVar('_Out')\\n_NextOut = TypeVar('_NextOut')\\n\\nclass MyTransformer(Transformer[_In, _Out]):\\n    def transform(self, data: _In) -> _Out:\\n        # Implement the transformation logic here\\n        pass\\n\\nclass MyAsyncTransformer(AsyncTransformer[_In, _Out]):\\n    async def transform_async(self, data: _In) -> _Out:\\n        # Implement the asynchronous transformation logic here\\n        pass\\n