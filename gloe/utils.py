import typing\\nfrom gloe.functional import transformer\\nfrom gloe.transformers import Transformer\\n\\n__all__ = ["forget", "debug", "forward", "forward_incoming"]\\n\\n_In = typing.TypeVar("_In")\\n_Out = typing.TypeVar("_Out")\\n\\n@transformer\\ndef forget(data: _In) -> None:\n    """Transform any input data to `None`"""\\n    return None\\n\\n@transformer\\ndef debug(incoming: _In) -> _In:\n    breakpoint()\\n    return incoming\\n\\nclass forward(Transformer[_In, _In]):\\n    def __init__(self):\\n        super().__init__()\\n        self._invisible = True\\n\\n    def __repr__(self):\\n        if self.previous is not None:\\n            return str(self.previous)\\n\\n        return super().__repr__()\\n\\n    def transform(self, data: _In) -> _In:\n        return data\\n\\ndef forward_incoming(inner_transformer: Transformer[_In, _Out]) -> Transformer[_In, typing.Tuple[_Out, _In]]:\\n    return forward() >> (inner_transformer, forward())