from typing import Any, Tuple, TypeVar, Generic\n\nfrom gloe.functional import transformer\nfrom gloe.transformers import Transformer\n\n__all__ = ["forget", "debug", "forward", "forward_incoming"]\n\n_In = TypeVar("_In")\n_Out = TypeVar("_Out")\n\n@transformer\ndef forget(data: Any) -> None:\n    """Transform any input data to `None`"""\n    return None\n\n@transformer\ndef debug(incoming: _In) -> _In:\n    breakpoint()\n    return incoming\n\nclass forward(Generic[_In], Transformer[_In, _In]):\n    def __init__(self):\n        super().__init__()\n        self._invisible = True\n\n    def __repr__(self):\n        if self.previous is not None:\n            return str(self.previous)\n\n        return super().__repr__()\n\n    def transform(self, data: _In) -> _In:\n        return data\n\n\ndef forward_incoming(inner_transformer: Transformer[_In, _Out]) -> Transformer[_In, Tuple[_Out, _In]]:\n    return forward[_In]() >> (inner_transformer, forward())