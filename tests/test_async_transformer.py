import asyncio\nimport unittest\nfrom typing import TypeVar, Any\nfrom gloe import async_transformer, ensure, UnsupportedTransformerArgException, transformer\nfrom gloe.functional import partial_async_transformer\nfrom gloe.utils import forward\n\n_In = TypeVar('_In')\n\n_DATA = {'foo': 'bar'}\n\n\nclass HasNotBarKey(Exception):\n    pass\n\n\ndef has_bar_key(dict):\n    if 'bar' not in dict.keys():\n        raise HasNotBarKey()\n\n\ndef is_string(data: Any):\n    if type(data) is not str:\n        raise Exception('Data is not a string')\n\n_URL = 'http://my-service'\n\n\nclass TestAsyncTransformer(unittest.IsolatedAsyncioTestCase):\n    async def test_basic_case(self):\n        test_forward = request_data >> forward()\n\n        result = await test_forward(_URL)\n\n        self.assertDictEqual(result, _DATA)\n\n    async def test_begin_with_transformer(self):\n        test_forward = forward[str]() >> request_data\n\n        result = await test_forward(_URL)\n\n        self.assertDictEqual(result, _DATA)\n\n    async def test_async_on_divergent_connection(self):\n        test_forward = forward[str]() >> (forward[str](), request_data)\n\n        result = await test_forward(_URL)\n\n        self.assertEqual(result, (_URL, _DATA))\n\n    async def test_divergent_connection_from_async(self):\n        test_forward = request_data >> (forward[dict[str, str]](), forward[dict[str, str]]())\n\n        result = await test_forward(_URL)\n\n        self.assertEqual(result, (_DATA, _DATA))\n\n    async def test_partial_async_transformer(self):\n        @partial_async_transformer\n        async def sleep_and_forward(data: dict[str, str], delay: float) -> dict[str, str]:\n            await asyncio.sleep(delay)\n            return data\n\n        pipeline = sleep_and_forward(0.1) >> forward()\n\n        result = await pipeline(_DATA)\n\n        self.assertEqual(result, _DATA)\n\n    async def test_ensure_async_transformer(self):\n        @ensure(incoming=[is_string], outcome=[has_bar_key])\n        @async_transformer\n        async def ensured_request(url: str) -> dict[str, str]:\n            await asyncio.sleep(0.1)\n            return _DATA\n\n        pipeline = ensured_request >> forward()\n\n        with self.assertRaises(HasNotBarKey):\n            await pipeline(_URL)\n\n    async def test_ensure_partial_async_transformer(self):\n        @ensure(incoming=[is_string], outcome=[has_bar_key])\n        @partial_async_transformer\n        async def ensured_delayed_request(url: str, delay: float) -> dict[str, str]:\n            await asyncio.sleep(delay)\n            return _DATA\n\n        pipeline = ensured_delayed_request(0.1) >> forward()\n\n        with self.assertRaises(HasNotBarKey):\n            await pipeline(_URL)\n\n    async def test_async_transformer_wrong_arg(self):\n        def next_transformer():\n            pass\n\n        @ensure(incoming=[is_string], outcome=[has_bar_key])\n        @partial_async_transformer\n        async def ensured_delayed_request(url: str, delay: float) -> dict[str, str]:\n            await asyncio.sleep(delay)\n            return _DATA\n\n        with self.assertRaises(UnsupportedTransformerArgException):\n            pipeline = ensured_delayed_request(0.1) >> next_transformer\n\n    async def test_async_transformer_copy(self):\n        @transformer\n        def add_slash(path: str) -> str:\n            return path + '/'\n\n        @partial_async_transformer\n        async def ensured_delayed_request(url: str, delay: float) -> dict[str, str]:\n            await asyncio.sleep(delay)\n            return _DATA\n\n        pipeline = add_slash >> ensured_delayed_request(0)\n\n        pipeline = pipeline.copy()\n        result = await pipeline(_URL)\n        self.assertEqual(result, _DATA)\n